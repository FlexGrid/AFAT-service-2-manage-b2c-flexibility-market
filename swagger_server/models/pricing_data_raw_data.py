# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PricingDataRawData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, auw_brtp: List[float]=None, bb_brtp: List[float]=None, finalcons: List[List[float]]=None, flex_q: List[float]=None, flex_r: List[float]=None, tc_brtp: List[float]=None, uw_bar_plot: List[List[float]]=None):  # noqa: E501
        """PricingDataRawData - a model defined in Swagger

        :param auw_brtp: The auw_brtp of this PricingDataRawData.  # noqa: E501
        :type auw_brtp: List[float]
        :param bb_brtp: The bb_brtp of this PricingDataRawData.  # noqa: E501
        :type bb_brtp: List[float]
        :param finalcons: The finalcons of this PricingDataRawData.  # noqa: E501
        :type finalcons: List[List[float]]
        :param flex_q: The flex_q of this PricingDataRawData.  # noqa: E501
        :type flex_q: List[float]
        :param flex_r: The flex_r of this PricingDataRawData.  # noqa: E501
        :type flex_r: List[float]
        :param tc_brtp: The tc_brtp of this PricingDataRawData.  # noqa: E501
        :type tc_brtp: List[float]
        :param uw_bar_plot: The uw_bar_plot of this PricingDataRawData.  # noqa: E501
        :type uw_bar_plot: List[List[float]]
        """
        self.swagger_types = {
            'auw_brtp': List[float],
            'bb_brtp': List[float],
            'finalcons': List[List[float]],
            'flex_q': List[float],
            'flex_r': List[float],
            'tc_brtp': List[float],
            'uw_bar_plot': List[List[float]]
        }

        self.attribute_map = {
            'auw_brtp': 'AUW_BRTP',
            'bb_brtp': 'BB_BRTP',
            'finalcons': 'FINALCONS',
            'flex_q': 'FLEX_Q',
            'flex_r': 'FLEX_R',
            'tc_brtp': 'TC_BRTP',
            'uw_bar_plot': 'uw_bar_plot'
        }
        self._auw_brtp = auw_brtp
        self._bb_brtp = bb_brtp
        self._finalcons = finalcons
        self._flex_q = flex_q
        self._flex_r = flex_r
        self._tc_brtp = tc_brtp
        self._uw_bar_plot = uw_bar_plot

    @classmethod
    def from_dict(cls, dikt) -> 'PricingDataRawData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingData_raw_data of this PricingDataRawData.  # noqa: E501
        :rtype: PricingDataRawData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auw_brtp(self) -> List[float]:
        """Gets the auw_brtp of this PricingDataRawData.


        :return: The auw_brtp of this PricingDataRawData.
        :rtype: List[float]
        """
        return self._auw_brtp

    @auw_brtp.setter
    def auw_brtp(self, auw_brtp: List[float]):
        """Sets the auw_brtp of this PricingDataRawData.


        :param auw_brtp: The auw_brtp of this PricingDataRawData.
        :type auw_brtp: List[float]
        """
        if auw_brtp is None:
            raise ValueError("Invalid value for `auw_brtp`, must not be `None`")  # noqa: E501

        self._auw_brtp = auw_brtp

    @property
    def bb_brtp(self) -> List[float]:
        """Gets the bb_brtp of this PricingDataRawData.


        :return: The bb_brtp of this PricingDataRawData.
        :rtype: List[float]
        """
        return self._bb_brtp

    @bb_brtp.setter
    def bb_brtp(self, bb_brtp: List[float]):
        """Sets the bb_brtp of this PricingDataRawData.


        :param bb_brtp: The bb_brtp of this PricingDataRawData.
        :type bb_brtp: List[float]
        """
        if bb_brtp is None:
            raise ValueError("Invalid value for `bb_brtp`, must not be `None`")  # noqa: E501

        self._bb_brtp = bb_brtp

    @property
    def finalcons(self) -> List[List[float]]:
        """Gets the finalcons of this PricingDataRawData.


        :return: The finalcons of this PricingDataRawData.
        :rtype: List[List[float]]
        """
        return self._finalcons

    @finalcons.setter
    def finalcons(self, finalcons: List[List[float]]):
        """Sets the finalcons of this PricingDataRawData.


        :param finalcons: The finalcons of this PricingDataRawData.
        :type finalcons: List[List[float]]
        """
        if finalcons is None:
            raise ValueError("Invalid value for `finalcons`, must not be `None`")  # noqa: E501

        self._finalcons = finalcons

    @property
    def flex_q(self) -> List[float]:
        """Gets the flex_q of this PricingDataRawData.


        :return: The flex_q of this PricingDataRawData.
        :rtype: List[float]
        """
        return self._flex_q

    @flex_q.setter
    def flex_q(self, flex_q: List[float]):
        """Sets the flex_q of this PricingDataRawData.


        :param flex_q: The flex_q of this PricingDataRawData.
        :type flex_q: List[float]
        """
        if flex_q is None:
            raise ValueError("Invalid value for `flex_q`, must not be `None`")  # noqa: E501

        self._flex_q = flex_q

    @property
    def flex_r(self) -> List[float]:
        """Gets the flex_r of this PricingDataRawData.


        :return: The flex_r of this PricingDataRawData.
        :rtype: List[float]
        """
        return self._flex_r

    @flex_r.setter
    def flex_r(self, flex_r: List[float]):
        """Sets the flex_r of this PricingDataRawData.


        :param flex_r: The flex_r of this PricingDataRawData.
        :type flex_r: List[float]
        """
        if flex_r is None:
            raise ValueError("Invalid value for `flex_r`, must not be `None`")  # noqa: E501

        self._flex_r = flex_r

    @property
    def tc_brtp(self) -> List[float]:
        """Gets the tc_brtp of this PricingDataRawData.


        :return: The tc_brtp of this PricingDataRawData.
        :rtype: List[float]
        """
        return self._tc_brtp

    @tc_brtp.setter
    def tc_brtp(self, tc_brtp: List[float]):
        """Sets the tc_brtp of this PricingDataRawData.


        :param tc_brtp: The tc_brtp of this PricingDataRawData.
        :type tc_brtp: List[float]
        """
        if tc_brtp is None:
            raise ValueError("Invalid value for `tc_brtp`, must not be `None`")  # noqa: E501

        self._tc_brtp = tc_brtp

    @property
    def uw_bar_plot(self) -> List[List[float]]:
        """Gets the uw_bar_plot of this PricingDataRawData.


        :return: The uw_bar_plot of this PricingDataRawData.
        :rtype: List[List[float]]
        """
        return self._uw_bar_plot

    @uw_bar_plot.setter
    def uw_bar_plot(self, uw_bar_plot: List[List[float]]):
        """Sets the uw_bar_plot of this PricingDataRawData.


        :param uw_bar_plot: The uw_bar_plot of this PricingDataRawData.
        :type uw_bar_plot: List[List[float]]
        """
        if uw_bar_plot is None:
            raise ValueError("Invalid value for `uw_bar_plot`, must not be `None`")  # noqa: E501

        self._uw_bar_plot = uw_bar_plot
