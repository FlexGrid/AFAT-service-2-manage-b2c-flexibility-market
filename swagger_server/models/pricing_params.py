# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pricing_params_callback import PricingParamsCallback  # noqa: F401,E501
from swagger_server import util


class PricingParams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_datetime: datetime=None, end_datetime: datetime=None, dr_prosumers: List[str]=None, flex_request: str=None, gamma_values: List[float]=None, profit_margin: float=None, callback: PricingParamsCallback=None):  # noqa: E501
        """PricingParams - a model defined in Swagger

        :param start_datetime: The start_datetime of this PricingParams.  # noqa: E501
        :type start_datetime: datetime
        :param end_datetime: The end_datetime of this PricingParams.  # noqa: E501
        :type end_datetime: datetime
        :param dr_prosumers: The dr_prosumers of this PricingParams.  # noqa: E501
        :type dr_prosumers: List[str]
        :param flex_request: The flex_request of this PricingParams.  # noqa: E501
        :type flex_request: str
        :param gamma_values: The gamma_values of this PricingParams.  # noqa: E501
        :type gamma_values: List[float]
        :param profit_margin: The profit_margin of this PricingParams.  # noqa: E501
        :type profit_margin: float
        :param callback: The callback of this PricingParams.  # noqa: E501
        :type callback: PricingParamsCallback
        """
        self.swagger_types = {
            'start_datetime': datetime,
            'end_datetime': datetime,
            'dr_prosumers': List[str],
            'flex_request': str,
            'gamma_values': List[float],
            'profit_margin': float,
            'callback': PricingParamsCallback
        }

        self.attribute_map = {
            'start_datetime': 'start_datetime',
            'end_datetime': 'end_datetime',
            'dr_prosumers': 'dr_prosumers',
            'flex_request': 'flex_request',
            'gamma_values': 'gamma_values',
            'profit_margin': 'profit_margin',
            'callback': 'callback'
        }
        self._start_datetime = start_datetime
        self._end_datetime = end_datetime
        self._dr_prosumers = dr_prosumers
        self._flex_request = flex_request
        self._gamma_values = gamma_values
        self._profit_margin = profit_margin
        self._callback = callback

    @classmethod
    def from_dict(cls, dikt) -> 'PricingParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingParams of this PricingParams.  # noqa: E501
        :rtype: PricingParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_datetime(self) -> datetime:
        """Gets the start_datetime of this PricingParams.


        :return: The start_datetime of this PricingParams.
        :rtype: datetime
        """
        return self._start_datetime

    @start_datetime.setter
    def start_datetime(self, start_datetime: datetime):
        """Sets the start_datetime of this PricingParams.


        :param start_datetime: The start_datetime of this PricingParams.
        :type start_datetime: datetime
        """
        if start_datetime is None:
            raise ValueError("Invalid value for `start_datetime`, must not be `None`")  # noqa: E501

        self._start_datetime = start_datetime

    @property
    def end_datetime(self) -> datetime:
        """Gets the end_datetime of this PricingParams.


        :return: The end_datetime of this PricingParams.
        :rtype: datetime
        """
        return self._end_datetime

    @end_datetime.setter
    def end_datetime(self, end_datetime: datetime):
        """Sets the end_datetime of this PricingParams.


        :param end_datetime: The end_datetime of this PricingParams.
        :type end_datetime: datetime
        """
        if end_datetime is None:
            raise ValueError("Invalid value for `end_datetime`, must not be `None`")  # noqa: E501

        self._end_datetime = end_datetime

    @property
    def dr_prosumers(self) -> List[str]:
        """Gets the dr_prosumers of this PricingParams.


        :return: The dr_prosumers of this PricingParams.
        :rtype: List[str]
        """
        return self._dr_prosumers

    @dr_prosumers.setter
    def dr_prosumers(self, dr_prosumers: List[str]):
        """Sets the dr_prosumers of this PricingParams.


        :param dr_prosumers: The dr_prosumers of this PricingParams.
        :type dr_prosumers: List[str]
        """
        if dr_prosumers is None:
            raise ValueError("Invalid value for `dr_prosumers`, must not be `None`")  # noqa: E501

        self._dr_prosumers = dr_prosumers

    @property
    def flex_request(self) -> str:
        """Gets the flex_request of this PricingParams.


        :return: The flex_request of this PricingParams.
        :rtype: str
        """
        return self._flex_request

    @flex_request.setter
    def flex_request(self, flex_request: str):
        """Sets the flex_request of this PricingParams.


        :param flex_request: The flex_request of this PricingParams.
        :type flex_request: str
        """
        if flex_request is None:
            raise ValueError("Invalid value for `flex_request`, must not be `None`")  # noqa: E501

        self._flex_request = flex_request

    @property
    def gamma_values(self) -> List[float]:
        """Gets the gamma_values of this PricingParams.


        :return: The gamma_values of this PricingParams.
        :rtype: List[float]
        """
        return self._gamma_values

    @gamma_values.setter
    def gamma_values(self, gamma_values: List[float]):
        """Sets the gamma_values of this PricingParams.


        :param gamma_values: The gamma_values of this PricingParams.
        :type gamma_values: List[float]
        """
        if gamma_values is None:
            raise ValueError("Invalid value for `gamma_values`, must not be `None`")  # noqa: E501

        self._gamma_values = gamma_values

    @property
    def profit_margin(self) -> float:
        """Gets the profit_margin of this PricingParams.


        :return: The profit_margin of this PricingParams.
        :rtype: float
        """
        return self._profit_margin

    @profit_margin.setter
    def profit_margin(self, profit_margin: float):
        """Sets the profit_margin of this PricingParams.


        :param profit_margin: The profit_margin of this PricingParams.
        :type profit_margin: float
        """
        if profit_margin is None:
            raise ValueError("Invalid value for `profit_margin`, must not be `None`")  # noqa: E501

        self._profit_margin = profit_margin

    @property
    def callback(self) -> PricingParamsCallback:
        """Gets the callback of this PricingParams.


        :return: The callback of this PricingParams.
        :rtype: PricingParamsCallback
        """
        return self._callback

    @callback.setter
    def callback(self, callback: PricingParamsCallback):
        """Sets the callback of this PricingParams.


        :param callback: The callback of this PricingParams.
        :type callback: PricingParamsCallback
        """

        self._callback = callback
