# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pricing_data_plots import PricingDataPlots  # noqa: F401,E501
from swagger_server.models.pricing_data_raw_data import PricingDataRawData  # noqa: F401,E501
from swagger_server import util


class PricingData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, plots: PricingDataPlots=None, raw_data: PricingDataRawData=None, callback_result: str=None):  # noqa: E501
        """PricingData - a model defined in Swagger

        :param plots: The plots of this PricingData.  # noqa: E501
        :type plots: PricingDataPlots
        :param raw_data: The raw_data of this PricingData.  # noqa: E501
        :type raw_data: PricingDataRawData
        :param callback_result: The callback_result of this PricingData.  # noqa: E501
        :type callback_result: str
        """
        self.swagger_types = {
            'plots': PricingDataPlots,
            'raw_data': PricingDataRawData,
            'callback_result': str
        }

        self.attribute_map = {
            'plots': 'plots',
            'raw_data': 'raw_data',
            'callback_result': 'callback_result'
        }
        self._plots = plots
        self._raw_data = raw_data
        self._callback_result = callback_result

    @classmethod
    def from_dict(cls, dikt) -> 'PricingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingData of this PricingData.  # noqa: E501
        :rtype: PricingData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plots(self) -> PricingDataPlots:
        """Gets the plots of this PricingData.


        :return: The plots of this PricingData.
        :rtype: PricingDataPlots
        """
        return self._plots

    @plots.setter
    def plots(self, plots: PricingDataPlots):
        """Sets the plots of this PricingData.


        :param plots: The plots of this PricingData.
        :type plots: PricingDataPlots
        """
        if plots is None:
            raise ValueError("Invalid value for `plots`, must not be `None`")  # noqa: E501

        self._plots = plots

    @property
    def raw_data(self) -> PricingDataRawData:
        """Gets the raw_data of this PricingData.


        :return: The raw_data of this PricingData.
        :rtype: PricingDataRawData
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data: PricingDataRawData):
        """Sets the raw_data of this PricingData.


        :param raw_data: The raw_data of this PricingData.
        :type raw_data: PricingDataRawData
        """
        if raw_data is None:
            raise ValueError("Invalid value for `raw_data`, must not be `None`")  # noqa: E501

        self._raw_data = raw_data

    @property
    def callback_result(self) -> str:
        """Gets the callback_result of this PricingData.


        :return: The callback_result of this PricingData.
        :rtype: str
        """
        return self._callback_result

    @callback_result.setter
    def callback_result(self, callback_result: str):
        """Sets the callback_result of this PricingData.


        :param callback_result: The callback_result of this PricingData.
        :type callback_result: str
        """

        self._callback_result = callback_result
