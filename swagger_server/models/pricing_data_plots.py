# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.plot import Plot  # noqa: F401,E501
from swagger_server import util


class PricingDataPlots(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, auw_vs_gamma: Plot=None, final_ecc: List[Plot]=None, flex_quantity: Plot=None, flex_revenues: Plot=None, uw_bar: List[Plot]=None):  # noqa: E501
        """PricingDataPlots - a model defined in Swagger

        :param auw_vs_gamma: The auw_vs_gamma of this PricingDataPlots.  # noqa: E501
        :type auw_vs_gamma: Plot
        :param final_ecc: The final_ecc of this PricingDataPlots.  # noqa: E501
        :type final_ecc: List[Plot]
        :param flex_quantity: The flex_quantity of this PricingDataPlots.  # noqa: E501
        :type flex_quantity: Plot
        :param flex_revenues: The flex_revenues of this PricingDataPlots.  # noqa: E501
        :type flex_revenues: Plot
        :param uw_bar: The uw_bar of this PricingDataPlots.  # noqa: E501
        :type uw_bar: List[Plot]
        """
        self.swagger_types = {
            'auw_vs_gamma': Plot,
            'final_ecc': List[Plot],
            'flex_quantity': Plot,
            'flex_revenues': Plot,
            'uw_bar': List[Plot]
        }

        self.attribute_map = {
            'auw_vs_gamma': 'AUW_vs_GAMMA',
            'final_ecc': 'FINAL_ECC',
            'flex_quantity': 'FLEX_QUANTITY',
            'flex_revenues': 'FLEX_REVENUES',
            'uw_bar': 'UW_BAR'
        }
        self._auw_vs_gamma = auw_vs_gamma
        self._final_ecc = final_ecc
        self._flex_quantity = flex_quantity
        self._flex_revenues = flex_revenues
        self._uw_bar = uw_bar

    @classmethod
    def from_dict(cls, dikt) -> 'PricingDataPlots':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingData_plots of this PricingDataPlots.  # noqa: E501
        :rtype: PricingDataPlots
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auw_vs_gamma(self) -> Plot:
        """Gets the auw_vs_gamma of this PricingDataPlots.


        :return: The auw_vs_gamma of this PricingDataPlots.
        :rtype: Plot
        """
        return self._auw_vs_gamma

    @auw_vs_gamma.setter
    def auw_vs_gamma(self, auw_vs_gamma: Plot):
        """Sets the auw_vs_gamma of this PricingDataPlots.


        :param auw_vs_gamma: The auw_vs_gamma of this PricingDataPlots.
        :type auw_vs_gamma: Plot
        """
        if auw_vs_gamma is None:
            raise ValueError("Invalid value for `auw_vs_gamma`, must not be `None`")  # noqa: E501

        self._auw_vs_gamma = auw_vs_gamma

    @property
    def final_ecc(self) -> List[Plot]:
        """Gets the final_ecc of this PricingDataPlots.


        :return: The final_ecc of this PricingDataPlots.
        :rtype: List[Plot]
        """
        return self._final_ecc

    @final_ecc.setter
    def final_ecc(self, final_ecc: List[Plot]):
        """Sets the final_ecc of this PricingDataPlots.


        :param final_ecc: The final_ecc of this PricingDataPlots.
        :type final_ecc: List[Plot]
        """
        if final_ecc is None:
            raise ValueError("Invalid value for `final_ecc`, must not be `None`")  # noqa: E501

        self._final_ecc = final_ecc

    @property
    def flex_quantity(self) -> Plot:
        """Gets the flex_quantity of this PricingDataPlots.


        :return: The flex_quantity of this PricingDataPlots.
        :rtype: Plot
        """
        return self._flex_quantity

    @flex_quantity.setter
    def flex_quantity(self, flex_quantity: Plot):
        """Sets the flex_quantity of this PricingDataPlots.


        :param flex_quantity: The flex_quantity of this PricingDataPlots.
        :type flex_quantity: Plot
        """
        if flex_quantity is None:
            raise ValueError("Invalid value for `flex_quantity`, must not be `None`")  # noqa: E501

        self._flex_quantity = flex_quantity

    @property
    def flex_revenues(self) -> Plot:
        """Gets the flex_revenues of this PricingDataPlots.


        :return: The flex_revenues of this PricingDataPlots.
        :rtype: Plot
        """
        return self._flex_revenues

    @flex_revenues.setter
    def flex_revenues(self, flex_revenues: Plot):
        """Sets the flex_revenues of this PricingDataPlots.


        :param flex_revenues: The flex_revenues of this PricingDataPlots.
        :type flex_revenues: Plot
        """
        if flex_revenues is None:
            raise ValueError("Invalid value for `flex_revenues`, must not be `None`")  # noqa: E501

        self._flex_revenues = flex_revenues

    @property
    def uw_bar(self) -> List[Plot]:
        """Gets the uw_bar of this PricingDataPlots.


        :return: The uw_bar of this PricingDataPlots.
        :rtype: List[Plot]
        """
        return self._uw_bar

    @uw_bar.setter
    def uw_bar(self, uw_bar: List[Plot]):
        """Sets the uw_bar of this PricingDataPlots.


        :param uw_bar: The uw_bar of this PricingDataPlots.
        :type uw_bar: List[Plot]
        """
        if uw_bar is None:
            raise ValueError("Invalid value for `uw_bar`, must not be `None`")  # noqa: E501

        self._uw_bar = uw_bar
